sql:
    mysql> create table T (
    ID int primary key,
    k int NOT NULL DEFAULT 0,
    s varchar(16) NOT NULL DEFAULT '',
    index k(k))
    engine=InnoDB;

    insert into T values(100,1, 'aa'),(200,2,'bb'),(300,3,'cc'),(500,5,'ee'),(600,6,'ff'),(700,7,'gg');
1.0 覆盖索引
  如果执行的语句是 select ID from T where k between 3 and 5，这时只需要查 ID 的值，而 ID 的值已经在 k 索引树上了，
因此可以直接提供查询结果，不需要回表。也就是说，在这个查询里面，索引 k 已经“覆盖了”我们的查询需求，我们称为覆盖索引。
由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。
2.0 联合索引(k+s)
 如果sql语句是 select s from T where k = 1, k是索引,那么执行的顺序就是
  1. 根据K获取ID，再根据ID回表查询出数据s
 如果这个Sql查询是一种高频的，那么显然会浪费了过多的性能，这个时候，就需要联合索引(k+s)，因为索引中存在了s数据，那么就可以直接返回了
3.0 最左前缀原则(name+age) [B+ 树这种索引结构，可以利用索引的“最左前缀”，来定位记录。]

 id1.[“A1”,10],id2.[“B1”,10]，id3.[“A2”,20]，id4.[“B2”,20]
  如果说sql是 selet * from T where name like 'A%',那么联合索引也是有用的，找到第一个之后，往后连续遍历即可，
这个最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符。
3.1 如何合理的建立联合索引顺序
 1. 如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的。
 2. 占用空间问题
注：详细样例https://time.geekbang.org/column/article/69636

4.0 索引下推优化

 mysql> select * from tuser where name like 'A%' and age=10 and ismale=1;
 在 MySQL 5.6 之前，只能从 ID3 开始一个个回表。到主键索引上找出数据行，再对比字段值。
 而 MySQL 5.6 引入的索引下推优化（index condition pushdown)， 可以在索引遍历过程中，[对索引中包含的字段先做判断]，直接过滤掉不满足条件的记录，减少回表次数。
